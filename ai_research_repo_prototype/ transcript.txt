import streamlit as st
import os
import traceback
from pathlib import Path
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.embeddings import SentenceTransformerEmbeddings
from langchain.llms import HuggingFaceHub
from langchain.docstore.document import Document
from langchain.chains import RetrievalQA

# --- Streamlit UI setup ---
st.set_page_config(page_title="Lab Workflow Research Chat", layout="wide")
st.title("üß¨ Ask Me Anything: Lab Workflow Research")
st.caption("Powered by Hugging Face (Mistral 7B) + LangChain")

# --- Load transcript from file ---
file_path = Path("transcript.txt")
if file_path.exists():
    transcript = file_path.read_text(encoding="utf-8")
    st.success("‚úÖ transcript.txt loaded successfully.")
else:
    st.error("‚ùå transcript.txt not found in ai_research_repo_prototype/.")
    st.stop()

# --- Show transcript preview ---
with st.expander("üìÑ View Transcript"):
    st.text(transcript[:5000])  # Limit preview to first 5000 characters

# --- Input box ---
query = st.text_input("‚ùì Ask a question about lab operations, pain points, or process improvements")

# --- Embeddings + Vectorstore ---
try:
    splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
    docs = [Document(page_content=transcript)]
    split_docs = splitter.split_documents(docs)

    embeddings = SentenceTransformerEmbeddings(
        model_name="all-MiniLM-L6-v2",
        model_kwargs={"device": "cpu"}
    )

    vectorstore = FAISS.from_documents(split_docs, embeddings)

except Exception as e:
    st.error("‚ùå Error during vectorstore creation.")
    st.code(traceback.format_exc())
    st.stop()

# --- Handle user query ---
if query:
    st.markdown(f"**üí¨ You asked:** {query}")
    response = None

    try:
        token = os.getenv("HUGGINGFACEHUB_API_TOKEN")
        if not token:
            raise ValueError("‚ùå Missing Hugging Face token. Add it to Streamlit secrets.")

        # ‚úÖ Mistral 7B - fully compatible with HuggingFaceHub
        llm = HuggingFaceHub(
            repo_id="mistralai/Mistral-7B-Instruct-v0.1",
            task="text-generation",
            model_kwargs={"temperature": 0.5, "max_new_tokens": 512}
        )

        qa_chain = RetrievalQA.from_chain_type(
            llm=llm,
            retriever=vectorstore.as_retriever(),
            chain_type="stuff",
            return_source_documents=False
        )

        response = qa_chain.run(query)

    except Exception as e:
        st.error("‚ùå Failed to generate response.")
        st.code(traceback.format_exc())

    if response:
        st.markdown(f"**ü§ñ AI says:** {response}")
    else:
        st.warning("‚ö†Ô∏è No response generated.")
